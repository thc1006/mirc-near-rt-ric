# KIND cluster configuration for O-RAN Near-RT RIC Platform
# This configuration creates a multi-node cluster suitable for O-RAN development

kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4

# Cluster name
name: near-rt-ric

# Networking configuration
networking:
  # Disable the default CNI
  disableDefaultCNI: false
  
  # Pod subnet (avoid conflicts with common networks)
  podSubnet: "10.244.0.0/16"
  
  # Service subnet  
  serviceSubnet: "10.96.0.0/16"
  
  # API server configuration
  apiServerAddress: "127.0.0.1"
  apiServerPort: 6443

# Node configuration
nodes:
  # Control plane node
  - role: control-plane
    image: kindest/node:v1.29.0
    
    # Kubernetes version-specific patches
    kubeadmConfigPatches:
      - |
        kind: InitConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "ingress-ready=true"
            
      - |
        kind: ClusterConfiguration
        apiServer:
          extraArgs:
            enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
        controllerManager:
          extraArgs:
            bind-address: "0.0.0.0"
        scheduler:
          extraArgs:
            bind-address: "0.0.0.0"
        etcd:
          local:
            extraArgs:
              listen-metrics-urls: "http://0.0.0.0:2381"
              
    # Port mappings for accessing services
    extraPortMappings:
      # Dashboard HTTP port
      - containerPort: 30080
        hostPort: 8080
        protocol: TCP
        
      # Dashboard HTTPS port  
      - containerPort: 30443
        hostPort: 8443
        protocol: TCP
        
      # xApp Dashboard port
      - containerPort: 30200
        hostPort: 4200
        protocol: TCP
        
      # Grafana port
      - containerPort: 30300
        hostPort: 3000
        protocol: TCP
        
      # Prometheus port
      - containerPort: 30900
        hostPort: 9090
        protocol: TCP
        
      # E2 Simulator port
      - containerPort: 36421
        hostPort: 36421
        protocol: SCTP
        
      # O1 Interface port
      - containerPort: 830
        hostPort: 830
        protocol: TCP
        
      # A1 Interface port
      - containerPort: 32080
        hostPort: 7080
        protocol: TCP

  # Worker node 1 - For O-RAN components
  - role: worker
    image: kindest/node:v1.29.0
    
    labels:
      node-type: "oran-worker"
      workload: "nearrt-ric"
      
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "node-type=oran-worker,workload=nearrt-ric"

  # Worker node 2 - For monitoring and additional services
  - role: worker
    image: kindest/node:v1.29.0
    
    labels:
      node-type: "monitoring-worker"
      workload: "monitoring"
      
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "node-type=monitoring-worker,workload=monitoring"

# Feature gates for advanced Kubernetes features
featureGates:
  # Enable topology aware hints for better traffic routing
  TopologyAwareHints: true
  
  # Enable graceful node shutdown
  GracefulNodeShutdown: true
  
  # Enable memory QoS
  MemoryQoS: true

# Runtime configuration
runtimeConfig:
  api/all: "true"

# Containerd configuration
containerdConfigPatches:
  - |-
    [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:5000"]
      endpoint = ["http://localhost:5000"]
    [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
      endpoint = ["https://registry-1.docker.io"]
    [plugins."io.containerd.grpc.v1.cri".registry.mirrors."k8s.gcr.io"]
      endpoint = ["https://k8s.gcr.io"]
    [plugins."io.containerd.grpc.v1.cri".registry.mirrors."gcr.io"]
      endpoint = ["https://gcr.io"]