# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 🚀 Optimized CD Pipeline

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*.*.*' ]
  workflow_run:
    workflows: ["🔄 Optimized CI Pipeline"]
    types: [completed]
    branches: [ master, main ]

# Prevent concurrent deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.21'
  NODE_VERSION: '18.17.0'
  
  # Performance optimizations
  NODE_OPTIONS: "--max-old-space-size=8192"
  NG_CLI_ANALYTICS: false
  DOCKER_CLI_EXPERIMENTAL: enabled
  BUILDKIT_PROGRESS: plain
  TERM: xterm

jobs:
  # Pre-deployment validation
  pre-deploy:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    outputs:
      deploy-env: ${{ steps.env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🎯 Determine Environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: 📋 Extract Version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --always --dirty)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: ✅ Deployment Check
        id: check
        run: |
          # Only deploy if CI passed or this is a manual trigger
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]] || [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Multi-platform optimized build
  build-and-push:
    name: 🏗️ Multi-Platform Build & Push
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.build.outputs.metadata }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐹 Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Multi-layer cache restoration
      - name: 🏎️ Restore Build Cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            node_modules
            ~/.npm
            dist/
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum', '**/package-lock.json', 'src/**') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ hashFiles('**/go.sum', '**/package-lock.json') }}
            ${{ runner.os }}-build-

      - name: 📦 Install Dependencies
        run: |
          if [ ! -d "node_modules" ]; then
            npm ci --prefer-offline --no-audit --ignore-scripts
          fi
          go mod download

      # Set up advanced Docker Buildx
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}
          driver-opts: |
            network=host
            image=moby/buildkit:buildx-stable-1

      # Registry login with enhanced security
      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate comprehensive metadata
      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=stable,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.title=O-RAN Near-RT RIC Dashboard
            org.opencontainers.image.description=O-RAN Near Real-Time RAN Intelligent Controller Dashboard
            org.opencontainers.image.vendor=O-RAN Alliance
            org.opencontainers.image.version=${{ needs.pre-deploy.outputs.version }}

      # Optimized application build
      - name: 🏗️ Build Application
        run: |
          export GOPATH=$(go env GOPATH)/bin
          export NODE_ENV=production
          export VERSION=${{ needs.pre-deploy.outputs.version }}
          
          # Build with optimizations
          make build-optimized

      # Enhanced Docker build with comprehensive caching
      - name: 🐳 Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./aio/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=${{ matrix.platform }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.platform }}
          cache-to: |
            type=gha,scope=${{ matrix.platform }},mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.platform }},mode=max
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            NODE_VERSION=${{ env.NODE_VERSION }}
            VERSION=${{ needs.pre-deploy.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            BUILDKIT_INLINE_CACHE=1
          provenance: true
          sbom: true

      # Sign container image
      - name: ✍️ Sign Container Image
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3

      - name: ✍️ Sign with Cosign
        if: github.event_name != 'pull_request'
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

      # Generate SBOM
      - name: 📄 Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: 📤 Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.platform }}
          path: sbom.spdx.json

  # Comprehensive security scanning
  security-scan:
    name: 🔒 Security & Compliance Scan
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-and-push]
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    steps:
      - name: 🔍 Vulnerability Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'json'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 🔍 Advanced Security Scan with Snyk
        if: env.SNYK_TOKEN
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          args: --severity-threshold=medium

      - name: 📄 CIS Benchmark Check
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            docker/docker-bench-security:latest

      - name: 📤 Upload Security Results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            trivy-results.json
            snyk-results.json

  # Parallel deployment to multiple environments
  deploy:
    name: 🚀 Deploy to ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-and-push, security-scan]
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    strategy:
      matrix:
        environment: 
          - ${{ needs.pre-deploy.outputs.deploy-env }}
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Kubernetes Tools
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: ⚙️ Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: 🔑 Configure Kubernetes Context
        run: |
          # Configure kubectl for the target environment
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl cluster-info

      # Environment-specific deployment
      - name: 🚀 Deploy to Kubernetes
        id: deploy
        run: |
          export IMAGE_TAG=${{ needs.pre-deploy.outputs.version }}
          export NAMESPACE=dashboard-${{ matrix.environment }}
          export REGISTRY=${{ env.REGISTRY }}
          export IMAGE_NAME=${{ env.IMAGE_NAME }}
          
          # Create namespace if it doesn't exist
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy using Helm with environment-specific values
          helm upgrade --install dashboard-${{ matrix.environment }} \
            ./aio/deploy/helm-chart/kubernetes-dashboard \
            --namespace $NAMESPACE \
            --set image.repository=$REGISTRY/$IMAGE_NAME \
            --set image.tag=$IMAGE_TAG \
            --set environment=${{ matrix.environment }} \
            --values ./aio/deploy/helm-chart/values-${{ matrix.environment }}.yaml \
            --wait --timeout=10m
          
          # Get service URL
          SERVICE_URL=$(kubectl get service -n $NAMESPACE dashboard-${{ matrix.environment }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "url=https://$SERVICE_URL" >> $GITHUB_OUTPUT

      # Health check and smoke tests
      - name: 🏥 Health Check
        run: |
          export NAMESPACE=dashboard-${{ matrix.environment }}
          
          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/dashboard-${{ matrix.environment }} -n $NAMESPACE
          
          # Run smoke tests
          kubectl run smoke-test-${{ github.run_id }} \
            --image=curlimages/curl:latest \
            --restart=Never \
            --rm -i --tty \
            -- curl -f http://dashboard-${{ matrix.environment }}.$NAMESPACE.svc.cluster.local:8080/health

      # Performance baseline
      - name: 📊 Performance Baseline
        if: matrix.environment == 'staging'
        run: |
          # Run performance tests against staging
          docker run --rm -v $(pwd):/workspace \
            grafana/k6:latest run /workspace/tests/k6/performance-baseline.js \
            --env BASE_URL=${{ steps.deploy.outputs.url }}

  # Release automation
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy]
    if: startsWith(github.ref, 'refs/tags/v') && needs.pre-deploy.outputs.should-deploy == 'true'
    permissions:
      contents: write
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate Changelog
        id: changelog
        run: |
          # Generate changelog from git history
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log $(git describe --tags --abbrev=0 HEAD~1)..HEAD --pretty=format:"- %s (%an)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📦 Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.pre-deploy.outputs.version }}
          name: Release ${{ needs.pre-deploy.outputs.version }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Container Images
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            ## Deployment
            ```bash
            helm upgrade --install dashboard \
              oci://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/helm \
              --version ${{ needs.pre-deploy.outputs.version }}
            ```
          draft: false
          prerelease: ${{ contains(needs.pre-deploy.outputs.version, 'alpha') || contains(needs.pre-deploy.outputs.version, 'beta') || contains(needs.pre-deploy.outputs.version, 'rc') }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # Notification and monitoring
  notify:
    name: 📬 Notifications & Monitoring
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy, release]
    if: always() && needs.pre-deploy.outputs.should-deploy == 'true'
    steps:
      - name: 📊 Deployment Status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Deployment successful to ${{ needs.pre-deploy.outputs.deploy-env }}"
            STATUS="success"
          else
            echo "❌ Deployment failed"
            STATUS="failure"
          fi
          echo "DEPLOYMENT_STATUS=$STATUS" >> $GITHUB_ENV

      - name: 📬 Slack Notification
        if: env.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.DEPLOYMENT_STATUS }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel: '#deployments'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              text: "Deployment ${{ env.DEPLOYMENT_STATUS }} for ${{ github.repository }}",
              attachments: [{
                color: "${{ env.DEPLOYMENT_STATUS == 'success' && 'good' || 'danger' }}",
                fields: [{
                  title: "Environment",
                  value: "${{ needs.pre-deploy.outputs.deploy-env }}",
                  short: true
                }, {
                  title: "Version",
                  value: "${{ needs.pre-deploy.outputs.version }}",
                  short: true
                }]
              }]
            }

      - name: 📊 Update Deployment Metrics
        if: env.DEPLOYMENT_STATUS == 'success'
        run: |
          # Send metrics to monitoring system
          curl -X POST "${{ secrets.METRICS_ENDPOINT }}" \
            -H "Authorization: Bearer ${{ secrets.METRICS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "metric": "deployment.success",
              "value": 1,
              "tags": {
                "environment": "${{ needs.pre-deploy.outputs.deploy-env }}",
                "version": "${{ needs.pre-deploy.outputs.version }}",
                "repository": "${{ github.repository }}"
              }
            }'