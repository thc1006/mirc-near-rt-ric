# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 🔒 Advanced Security Scanning

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - dependency-only
        - code-only
        - container-only

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write
  pull-requests: write

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18.17.0'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependency-only' || github.event.inputs.scan_type == ''
    strategy:
      matrix:
        scanner: ['npm-audit', 'snyk', 'govulncheck', 'osv-scanner']
      fail-fast: false
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐹 Setup Go
        if: matrix.scanner == 'govulncheck' || matrix.scanner == 'osv-scanner'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📦 Setup Node.js
        if: matrix.scanner == 'npm-audit' || matrix.scanner == 'snyk'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # NPM Audit
      - name: 🔍 NPM Audit
        if: matrix.scanner == 'npm-audit'
        continue-on-error: true
        run: |
          npm ci --audit
          npm audit --audit-level=moderate --json > npm-audit-results.json || true

      # Snyk Vulnerability Scan
      - name: 🔍 Snyk Vulnerability Scan
        if: matrix.scanner == 'snyk'
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json

      # Go Vulnerability Check
      - name: 🔍 Go Vulnerability Check
        if: matrix.scanner == 'govulncheck'
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -json ./... > govulncheck-results.json || true

      # OSV Scanner
      - name: 🔍 OSV Scanner
        if: matrix.scanner == 'osv-scanner'
        uses: google/osv-scanner-action@v1
        continue-on-error: true
        with:
          scan-args: |-
            --output=json
            --format=json
            ./

      - name: 📤 Upload Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-${{ matrix.scanner }}
          path: |
            *-results.json
            osv-scanner-results.json

  # Static Application Security Testing (SAST)
  sast-scan:
    name: 🔍 Static Application Security Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code-only' || github.event.inputs.scan_type == ''
    strategy:
      matrix:
        scanner: ['codeql', 'semgrep', 'gosec', 'eslint-security']
      fail-fast: false
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐹 Setup Go
        if: matrix.scanner == 'codeql' || matrix.scanner == 'gosec'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📦 Setup Node.js
        if: matrix.scanner == 'codeql' || matrix.scanner == 'eslint-security'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # CodeQL Analysis
      - name: 🔍 Initialize CodeQL
        if: matrix.scanner == 'codeql'
        uses: github/codeql-action/init@v2
        with:
          languages: go, typescript
          config-file: .github/codeql/codeql-config.yml

      - name: 🏗️ CodeQL Autobuild
        if: matrix.scanner == 'codeql'
        uses: github/codeql-action/autobuild@v2

      - name: 🔍 Perform CodeQL Analysis
        if: matrix.scanner == 'codeql'
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"

      # Semgrep SAST
      - name: 🔍 Semgrep Security Scan
        if: matrix.scanner == 'semgrep'
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/golang
            p/typescript
          generateSarif: "1"

      # Gosec Go Security Scanner
      - name: 🔍 Gosec Security Scanner
        if: matrix.scanner == 'gosec'
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif -stdout -verbose=text ./...'

      - name: 📤 Upload Gosec Results
        if: matrix.scanner == 'gosec'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec-results.sarif

      # ESLint Security Plugin
      - name: 📦 Install Dependencies
        if: matrix.scanner == 'eslint-security'
        run: npm ci

      - name: 🔍 ESLint Security Scan
        if: matrix.scanner == 'eslint-security'
        run: |
          npx eslint . --ext .ts,.js --format json --output-file eslint-security-results.json \
            --config .eslintrc-security.js || true

      - name: 📤 Upload SAST Results
        uses: actions/upload-artifact@v4
        with:
          name: sast-scan-${{ matrix.scanner }}
          path: |
            *.sarif
            *-results.json

  # Container and Infrastructure Security
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'container-only' || github.event.inputs.scan_type == ''
    strategy:
      matrix:
        scanner: ['trivy', 'grype', 'clair', 'docker-bench']
      fail-fast: false
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker Image for Scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./aio/Dockerfile
          tags: dashboard:scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Trivy Container Scanner
      - name: 🔍 Trivy Container Scan
        if: matrix.scanner == 'trivy'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dashboard:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy Results
        if: matrix.scanner == 'trivy'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      # Grype Container Scanner
      - name: 🔍 Grype Container Scan
        if: matrix.scanner == 'grype'
        uses: anchore/scan-action@v3
        with:
          image: "dashboard:scan"
          output-format: sarif
          output-file: grype-results.sarif

      - name: 📤 Upload Grype Results
        if: matrix.scanner == 'grype'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: grype-results.sarif

      # Clair Container Scanner
      - name: 🔍 Clair Container Scan
        if: matrix.scanner == 'clair'
        run: |
          docker run -d --name clair-db arminc/clair-db:latest
          docker run -p 6060:6060 --link clair-db:postgres -d --name clair arminc/clair-local-scan:latest
          sleep 30
          docker run --rm --link clair:clair -v /tmp:/tmp arminc/clair-scanner:latest \
            --clair="http://clair:6060" --ip="$(hostname -i)" dashboard:scan || true

      # Docker Bench Security
      - name: 🔍 Docker Bench Security
        if: matrix.scanner == 'docker-bench'
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /etc/systemd:/etc/systemd:ro \
            docker/docker-bench-security:latest > docker-bench-results.txt || true

      - name: 📤 Upload Container Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-${{ matrix.scanner }}
          path: |
            *.sarif
            *-results.txt
            *-results.json

  # Secrets Detection
  secrets-scan:
    name: 🔐 Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # GitLeaks Secret Scanner
      - name: 🔍 GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # TruffleHog Secret Scanner
      - name: 🔍 TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # License Compliance
  license-scan:
    name: 📄 License Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      # License Checker
      - name: 🔍 License Compliance Check
        run: |
          npx license-checker --json --out license-report.json
          npx license-checker --summary

      # FOSSA License Scan (if token available)
      - name: 🔍 FOSSA License Scan
        if: env.FOSSA_API_KEY
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

      - name: 📤 Upload License Results
        uses: actions/upload-artifact@v4
        with:
          name: license-scan-results
          path: license-report.json

  # Security Report Aggregation
  security-report:
    name: 📊 Security Report Aggregation
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, container-scan, secrets-scan, license-scan]
    if: always()
    steps:
      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-results

      - name: 📊 Generate Security Report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          # Process dependency scan results
          echo "## Dependency Vulnerabilities" >> security-report.md
          find security-results -name "*audit*" -o -name "*snyk*" -o -name "*govulncheck*" | while read file; do
            echo "- Found vulnerabilities in: $file" >> security-report.md
          done
          
          # Process SAST results
          echo "## Static Analysis Results" >> security-report.md
          find security-results -name "*.sarif" | while read file; do
            echo "- SARIF report: $file" >> security-report.md
          done
          
          # Process container scan results
          echo "## Container Security" >> security-report.md
          find security-results -name "*trivy*" -o -name "*grype*" | while read file; do
            echo "- Container scan: $file" >> security-report.md
          done

      - name: 📤 Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      # Create GitHub Issue for Security Findings (if any)
      - name: 🚨 Create Security Issue
        if: github.event_name == 'schedule' && github.ref == 'refs/heads/master'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            // Only create issue if there are findings
            if (report.includes('Found vulnerabilities') || report.includes('SARIF report')) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Security Scan Findings - ${new Date().toISOString().split('T')[0]}`,
                body: report,
                labels: ['security', 'automated']
              });
            }

  # Security Notifications
  notify-security:
    name: 📬 Security Notifications
    runs-on: ubuntu-latest
    needs: security-report
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    steps:
      - name: 📬 Slack Security Notification
        if: env.SLACK_SECURITY_WEBHOOK
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
          channel: '#security'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              text: "Security scan completed for ${{ github.repository }}",
              attachments: [{
                color: "${{ job.status == 'success' && 'good' || 'warning' }}",
                fields: [{
                  title: "Scan Type",
                  value: "${{ github.event.inputs.scan_type || 'scheduled' }}",
                  short: true
                }, {
                  title: "Branch",
                  value: "${{ github.ref_name }}",
                  short: true
                }]
              }]
            }