// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: src/app/backend/federatedlearning/proto/federatedlearning.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FederatedLearningClient is the client API for FederatedLearning service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FederatedLearningClient interface {
	// A client-to-coordinator stream for a single training job.
	HandleTraining(ctx context.Context, opts ...grpc.CallOption) (FederatedLearning_HandleTrainingClient, error)
}

type federatedLearningClient struct {
	cc grpc.ClientConnInterface
}

func NewFederatedLearningClient(cc grpc.ClientConnInterface) FederatedLearningClient {
	return &federatedLearningClient{cc}
}

func (c *federatedLearningClient) HandleTraining(ctx context.Context, opts ...grpc.CallOption) (FederatedLearning_HandleTrainingClient, error) {
	stream, err := c.cc.NewStream(ctx, &FederatedLearning_ServiceDesc.Streams[0], "/federatedlearning.FederatedLearning/HandleTraining", opts...)
	if err != nil {
		return nil, err
	}
	x := &federatedLearningHandleTrainingClient{stream}
	return x, nil
}

type FederatedLearning_HandleTrainingClient interface {
	Send(*TrainingRequest) error
	Recv() (*TrainingResponse, error)
	grpc.ClientStream
}

type federatedLearningHandleTrainingClient struct {
	grpc.ClientStream
}

func (x *federatedLearningHandleTrainingClient) Send(m *TrainingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *federatedLearningHandleTrainingClient) Recv() (*TrainingResponse, error) {
	m := new(TrainingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FederatedLearningServer is the server API for FederatedLearning service.
// All implementations must embed UnimplementedFederatedLearningServer
// for forward compatibility
type FederatedLearningServer interface {
	// A client-to-coordinator stream for a single training job.
	HandleTraining(FederatedLearning_HandleTrainingServer) error
	mustEmbedUnimplementedFederatedLearningServer()
}

// UnimplementedFederatedLearningServer must be embedded to have forward compatible implementations.
type UnimplementedFederatedLearningServer struct {
}

func (UnimplementedFederatedLearningServer) HandleTraining(FederatedLearning_HandleTrainingServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleTraining not implemented")
}
func (UnimplementedFederatedLearningServer) mustEmbedUnimplementedFederatedLearningServer() {}

// UnsafeFederatedLearningServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FederatedLearningServer will
// result in compilation errors.
type UnsafeFederatedLearningServer interface {
	mustEmbedUnimplementedFederatedLearningServer()
}

func RegisterFederatedLearningServer(s grpc.ServiceRegistrar, srv FederatedLearningServer) {
	s.RegisterService(&FederatedLearning_ServiceDesc, srv)
}

func _FederatedLearning_HandleTraining_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FederatedLearningServer).HandleTraining(&federatedLearningHandleTrainingServer{stream})
}

type FederatedLearning_HandleTrainingServer interface {
	Send(*TrainingResponse) error
	Recv() (*TrainingRequest, error)
	grpc.ServerStream
}

type federatedLearningHandleTrainingServer struct {
	grpc.ServerStream
}

func (x *federatedLearningHandleTrainingServer) Send(m *TrainingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *federatedLearningHandleTrainingServer) Recv() (*TrainingRequest, error) {
	m := new(TrainingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FederatedLearning_ServiceDesc is the grpc.ServiceDesc for FederatedLearning service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FederatedLearning_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "federatedlearning.FederatedLearning",
	HandlerType: (*FederatedLearningServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleTraining",
			Handler:       _FederatedLearning_HandleTraining_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/app/backend/federatedlearning/proto/federatedlearning.proto",
}
