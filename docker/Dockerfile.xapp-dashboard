# Dockerfile for xApp Dashboard
# Security-hardened production image for O-RAN xApp Dashboard

# Stage 1: Build Angular application
FROM node:18-alpine AS builder

# Install security updates and build dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache python3 make g++ && \
    npm install -g @angular/cli@15.0.0

# Create non-root user for building
RUN adduser -D -g '' builder
USER builder

WORKDIR /app

# Copy package files
COPY --chown=builder:builder frontend-dashboard/package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY --chown=builder:builder frontend-dashboard/ .

# Build the Angular application
RUN ng build --configuration=production --aot --build-optimizer

# Stage 2: Create Nginx runtime image
FROM nginx:1.25-alpine

# Install security updates
RUN apk update && apk upgrade && \
    apk add --no-cache curl && \
    rm -rf /var/cache/apk/*

# Remove default nginx website
RUN rm -rf /usr/share/nginx/html/*

# Copy built Angular app
COPY --from=builder /app/dist/ /usr/share/nginx/html/

# Copy custom nginx configuration
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/default.conf /etc/nginx/conf.d/default.conf

# Create non-root user for nginx
RUN addgroup -g 101 -S nginx || true && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx || true

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Create pid file directory
RUN mkdir -p /var/run && \
    chown nginx:nginx /var/run

# Switch to non-root user
USER nginx

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose port
EXPOSE 8080

# Start nginx
CMD ["nginx", "-g", "daemon off;"]