# Multi-stage Dockerfile for O-RAN Near-RT RIC Dashboard
# Security-hardened production image

# Stage 1: Build Go backend
FROM golang:1.22-alpine AS go-builder

# Install security updates and required packages
RUN apk update && apk upgrade && \
    apk add --no-cache git ca-certificates tzdata && \
    update-ca-certificates

# Create non-root user for building
RUN adduser -D -g '' builder

WORKDIR /app
COPY dashboard-master/dashboard-master/go.mod dashboard-master/dashboard-master/go.sum ./
RUN go mod download && go mod verify

COPY dashboard-master/dashboard-master/ .

# Build the Go application with security flags
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -tags netgo -installsuffix netgo \
    -o dashboard-backend \
    ./src/app/backend/

# Stage 2: Build Angular frontend
FROM node:18-alpine AS ng-builder

# Install security updates
RUN apk update && apk upgrade && \
    apk add --no-cache python3 make g++

WORKDIR /app
COPY dashboard-master/dashboard-master/package*.json ./
RUN npm ci --only=production && npm cache clean --force

COPY dashboard-master/dashboard-master/ .
RUN npm run build:prod

# Stage 3: Create final runtime image
FROM alpine:3.18

# Install security updates and runtime dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache ca-certificates curl && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 65532 -S oran && \
    adduser -u 65532 -S oran -G oran

# Create required directories
RUN mkdir -p /app/dist /app/config /data/models /var/log && \
    chown -R oran:oran /app /data /var/log

# Copy binaries and assets from builder stages
COPY --from=go-builder --chown=oran:oran /app/dashboard-backend /app/
COPY --from=ng-builder --chown=oran:oran /app/dist/ /app/dist/
COPY --from=go-builder --chown=oran:oran /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy configuration files
COPY --chown=oran:oran config/ /app/config/

# Set up security configurations
RUN chmod 550 /app/dashboard-backend && \
    chmod -R 440 /app/config/ && \
    chmod 750 /data /var/log

# Switch to non-root user
USER oran

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Set working directory
WORKDIR /app

# Expose ports
EXPOSE 8080 9091

# Set environment variables
ENV GIN_MODE=release \
    LOG_LEVEL=info \
    CONFIG_PATH=/app/config

# Run the application
CMD ["./dashboard-backend", "--config=/app/config/dashboard.yaml"]