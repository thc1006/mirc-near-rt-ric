# CI/CD Orchestrator with Error Handling and Authentication
name: CI/CD Orchestrator

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      force_rebuild:
        description: 'Force rebuild of all components'
        required: false
        default: false
        type: boolean

env:
  # Global configuration
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}
  
  # Authentication configuration
  GOPRIVATE: 'github.com/hctsai1006/*'
  NPM_CONFIG_FUND: 'false'
  NPM_CONFIG_AUDIT: 'false'
  
  # Retry configuration
  MAX_RETRY_ATTEMPTS: '3'
  RETRY_DELAY_SECONDS: '10'

jobs:
  # Job to validate prerequisites and setup authentication
  setup-auth:
    name: Setup Authentication & Prerequisites
    runs-on: ubuntu-latest
    outputs:
      go-auth-configured: ${{ steps.setup-go-auth.outputs.configured }}
      npm-auth-configured: ${{ steps.setup-npm-auth.outputs.configured }}
      docker-auth-configured: ${{ steps.setup-docker-auth.outputs.configured }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go authentication
        id: setup-go-auth
        run: |
          echo "üîß Configuring Go authentication..."
          
          # Configure Git for Go modules with GitHub token
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}:x-oauth-basic@github.com/".insteadOf "git@github.com:"
          
          # Set Go environment variables
          echo "GOPRIVATE=${{ env.GOPRIVATE }}" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV
          echo "GOSUMDB=sum.golang.org" >> $GITHUB_ENV
          
          # Test authentication
          if curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -s "https://api.github.com/user" > /dev/null; then
            echo "‚úÖ Go authentication configured successfully"
            echo "configured=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Go authentication configuration failed"
            echo "configured=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup NPM authentication
        id: setup-npm-auth
        run: |
          echo "üîß Configuring NPM authentication..."
          
          # Configure npm for GitHub packages if needed
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
            echo "@hctsai1006:registry=https://npm.pkg.github.com" >> ~/.npmrc
            echo "configured=true" >> $GITHUB_OUTPUT
          else
            echo "NPM_TOKEN not set, using default registry"
            echo "configured=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Docker authentication
        id: setup-docker-auth
        run: |
          echo "üîß Configuring Docker authentication..."
          
          # Login to GitHub Container Registry
          if echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin; then
            echo "‚úÖ Docker authentication configured successfully"
            echo "configured=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Docker authentication configuration failed"
            echo "configured=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate authentication setup
        run: |
          echo "üìã Authentication Setup Summary:"
          echo "- Go Auth: ${{ steps.setup-go-auth.outputs.configured }}"
          echo "- NPM Auth: ${{ steps.setup-npm-auth.outputs.configured }}"
          echo "- Docker Auth: ${{ steps.setup-docker-auth.outputs.configured }}"

  # Trigger backend CI with proper authentication
  build-and-test:
    name: Build and Test All Components
    needs: setup-auth
    uses: ./.github/workflows/ci.yml
    secrets: inherit
    with:
      force_rebuild: ${{ github.event.inputs.force_rebuild == 'true' }}
      skip_tests: ${{ github.event.inputs.skip_tests == 'true' }}

  # Security scanning
  security-scan:
    name: Security Scanning
    needs: [setup-auth]
    uses: ./.github/workflows/security-complete.yml
    secrets: inherit

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'pull_request' && needs.build-and-test.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          echo "üê≥ Setting up Docker Compose for integration tests..."
          
          # Verify docker-compose.yml exists
          if [ ! -f "docker-compose.yml" ]; then
            echo "‚ùå docker-compose.yml not found"
            exit 1
          fi

      - name: Run integration tests with retry
        run: |
          echo "üß™ Running integration tests..."
          
          retry_command() {
            local cmd="$1"
            local max_attempts=${{ env.MAX_RETRY_ATTEMPTS }}
            local delay=${{ env.RETRY_DELAY_SECONDS }}
            
            for i in $(seq 1 $max_attempts); do
              echo "Integration test attempt $i/$max_attempts..."
              if eval "$cmd"; then
                echo "‚úÖ Integration tests passed"
                return 0
              else
                echo "‚ùå Integration test attempt $i failed"
                if [ $i -lt $max_attempts ]; then
                  echo "Retrying in $delay seconds..."
                  sleep $delay
                  # Clean up before retry
                  docker-compose down -v || true
                else
                  echo "‚ùå All integration test attempts failed"
                  return 1
                fi
              fi
            done
          }
          
          # Run integration tests with retry
          retry_command "docker-compose up --build --abort-on-container-exit --exit-code-from test"

      - name: Cleanup integration test environment
        if: always()
        run: |
          echo "üßπ Cleaning up integration test environment..."
          docker-compose down -v || true
          docker system prune -f || true

  # Build and push Docker images
  build-images:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [build-and-test, setup-auth]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        image:
          - name: dashboard
            dockerfile: docker/Dockerfile.dashboard
            context: .
          - name: fl-coordinator
            dockerfile: docker/Dockerfile.fl-coordinator
            context: .
          - name: xapp-dashboard
            dockerfile: docker/Dockerfile.xapp-dashboard
            context: .
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.image.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push with retry
        run: |
          echo "üê≥ Building and pushing ${{ matrix.image.name }}..."
          
          retry_build() {
            local max_attempts=${{ env.MAX_RETRY_ATTEMPTS }}
            local delay=${{ env.RETRY_DELAY_SECONDS }}
            
            for i in $(seq 1 $max_attempts); do
              echo "Build attempt $i/$max_attempts for ${{ matrix.image.name }}..."
              
              if docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --context ${{ matrix.image.context }} \
                --file ${{ matrix.image.dockerfile }} \
                --push \
                --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
                --build-arg BUILDKIT_INLINE_CACHE=1 \
                --cache-from type=gha \
                --cache-to type=gha,mode=max \
                ${{ steps.meta.outputs.tags }} \
                ${{ steps.meta.outputs.labels }}; then
                echo "‚úÖ Successfully built and pushed ${{ matrix.image.name }}"
                return 0
              else
                echo "‚ùå Build attempt $i failed for ${{ matrix.image.name }}"
                if [ $i -lt $max_attempts ]; then
                  echo "Retrying in $delay seconds..."
                  sleep $delay
                else
                  echo "‚ùå All build attempts failed for ${{ matrix.image.name }}"
                  return 1
                fi
              fi
            done
          }
          
          retry_build

  # Deployment orchestration
  deploy:
    name: Deploy to Environments
    needs: [build-images, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/deploy-multi-env.yml
    secrets: inherit

  # Failure handling and notifications
  handle-failures:
    name: Handle CI/CD Failures
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, integration-tests, build-images, deploy]
    if: always() && contains(needs.*.result, 'failure')
    
    steps:
      - name: Analyze failures
        run: |
          echo "üìä CI/CD Pipeline Failure Analysis:"
          echo "- Backend CI: ${{ needs.backend-ci.result }}"
          echo "- Frontend CI: ${{ needs.frontend-ci.result }}"
          echo "- Security Scan: ${{ needs.security-scan.result }}"
          echo "- Integration Tests: ${{ needs.integration-tests.result }}"
          echo "- Build Images: ${{ needs.build-images.result }}"
          echo "- Deploy: ${{ needs.deploy.result }}"
          
          # Determine critical vs non-critical failures
          if [ "${{ needs.backend-ci.result }}" = "failure" ] || [ "${{ needs.frontend-ci.result }}" = "failure" ]; then
            echo "‚ùå Critical build failures detected"
            echo "FAILURE_TYPE=critical" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Non-critical failures detected"
            echo "FAILURE_TYPE=non-critical" >> $GITHUB_ENV
          fi

      - name: Create failure issue
        if: env.FAILURE_TYPE == 'critical'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Critical CI/CD Pipeline Failure - ${context.payload.head_commit.message}`,
              body: `## Pipeline Failure Report
              
              **Commit:** ${context.sha}
              **Branch:** ${context.ref}
              **Triggered by:** ${context.actor}
              **Workflow:** ${context.workflow}
              
              ## Failed Jobs:
              - Backend CI: ${{ needs.backend-ci.result }}
              - Frontend CI: ${{ needs.frontend-ci.result }}
              - Security Scan: ${{ needs.security-scan.result }}
              - Integration Tests: ${{ needs.integration-tests.result }}
              - Build Images: ${{ needs.build-images.result }}
              - Deploy: ${{ needs.deploy.result }}
              
              ## Next Steps:
              1. Review the failed job logs
              2. Fix the identified issues
              3. Re-run the pipeline
              
              **Auto-generated by CI/CD Pipeline**`,
              labels: ['ci-failure', 'high-priority', 'bug']
            })

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        continue-on-error: true

  # Success notifications and reporting
  success-report:
    name: Success Report
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, integration-tests, build-images, deploy]
    if: always() && !contains(needs.*.result, 'failure')
    
    steps:
      - name: Generate success report
        run: |
          echo "üéâ CI/CD Pipeline Success Report:"
          echo "- Backend CI: ‚úÖ ${{ needs.backend-ci.result }}"
          echo "- Frontend CI: ‚úÖ ${{ needs.frontend-ci.result }}"
          echo "- Security Scan: ‚úÖ ${{ needs.security-scan.result }}"
          echo "- Integration Tests: ‚úÖ ${{ needs.integration-tests.result }}"
          echo "- Build Images: ‚úÖ ${{ needs.build-images.result }}"
          echo "- Deploy: ‚úÖ ${{ needs.deploy.result }}"

      - name: Notify success
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "üöÄ Pipeline completed successfully! All components built, tested, and deployed."
        continue-on-error: true