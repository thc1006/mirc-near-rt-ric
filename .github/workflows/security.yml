# Security scanning and compliance workflow
name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

jobs:
  # SAST (Static Application Security Testing)
  sast:
    name: Static Analysis Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: go, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/kubernetes

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run nancy (Go dependency scanner)
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth

      - name: Run npm audit
        run: |
          cd dashboard-master/dashboard-master && npm audit --audit-level=moderate
          cd ../../xAPP_dashboard-master && npm audit --audit-level=moderate

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Infrastructure as Code security scanning
  iac-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: kubernetes,dockerfile
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov.sarif

      - name: Run kube-score
        run: |
          wget https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64.tar.gz
          tar -xzf kube-score_1.16.1_linux_amd64.tar.gz
          chmod +x kube-score
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs ./kube-score score

  # Container image security scanning
  image-scan:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -t test-dashboard -f docker/Dockerfile.dashboard .
          docker build -t test-fl-coordinator -f docker/Dockerfile.fl-coordinator .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test-dashboard
          format: 'sarif'
          output: 'trivy-dashboard.sarif'

      - name: Run Trivy on FL coordinator
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test-fl-coordinator
          format: 'sarif'
          output: 'trivy-fl-coordinator.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-dashboard.sarif

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: test-dashboard
          severity-cutoff: medium

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # License compliance scanning
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check Go licenses
        run: |
          cd dashboard-master/dashboard-master
          go-licenses check ./...

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check Node.js licenses
        run: |
          cd dashboard-master/dashboard-master && license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'
          cd ../../xAPP_dashboard-master && license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'

  # Security policy compliance
  compliance-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy files
        run: |
          test -f SECURITY.md || (echo "SECURITY.md not found" && exit 1)
          test -f .github/SECURITY.md || echo ".github/SECURITY.md not found (optional)"

      - name: Validate Kubernetes security policies
        run: |
          # Check for PodSecurityPolicies or SecurityContexts
          grep -r "securityContext\|runAsNonRoot\|readOnlyRootFilesystem" k8s/ || echo "Security contexts should be defined"
          
          # Check for NetworkPolicies
          find k8s/ -name "*network-policy*" || echo "NetworkPolicies should be defined"

      - name: Check RBAC configurations
        run: |
          grep -r "ClusterRole\|Role\|RoleBinding\|ClusterRoleBinding" k8s/ && echo "RBAC found" || echo "RBAC configurations missing"

  # Generate security report
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [sast, dependency-scan, iac-scan, secret-scan, license-scan]
    if: always()
    
    steps:
      - name: Generate security summary
        run: |
          echo "## Security Scan Summary" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          echo "### Scan Results:" >> security-report.md
          echo "- SAST: ${{ needs.sast.result }}" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- IaC Scan: ${{ needs.iac-scan.result }}" >> security-report.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- License Scan: ${{ needs.license-scan.result }}" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md