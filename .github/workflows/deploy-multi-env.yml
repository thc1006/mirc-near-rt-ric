# Multi-Environment Deployment Pipeline for O-RAN Near-RT RIC
name: Multi-Environment Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - development
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  HELM_VERSION: 'v3.12.0'
  KUBECTL_VERSION: 'v1.28.0'

jobs:
  # Job 1: Pre-deployment validation
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      deploy-staging: ${{ steps.determine.outputs.deploy-staging }}
      deploy-production: ${{ steps.determine.outputs.deploy-production }}
      deploy-development: ${{ steps.determine.outputs.deploy-development }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine deployment targets
        id: determine
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            case "${{ github.event.inputs.environment }}" in
              "staging")
                echo "deploy-staging=true" >> $GITHUB_OUTPUT
                echo "deploy-production=false" >> $GITHUB_OUTPUT
                echo "deploy-development=false" >> $GITHUB_OUTPUT
                ;;
              "production")
                echo "deploy-staging=false" >> $GITHUB_OUTPUT
                echo "deploy-production=true" >> $GITHUB_OUTPUT
                echo "deploy-development=false" >> $GITHUB_OUTPUT
                ;;
              "development")
                echo "deploy-staging=false" >> $GITHUB_OUTPUT
                echo "deploy-production=false" >> $GITHUB_OUTPUT
                echo "deploy-development=true" >> $GITHUB_OUTPUT
                ;;
            esac
          else
            # Auto deployment from main branch
            echo "deploy-staging=true" >> $GITHUB_OUTPUT
            echo "deploy-production=false" >> $GITHUB_OUTPUT
            echo "deploy-development=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate Helm charts
        run: |
          curl https://get.helm.sh/helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/
          
          if [ -d "helm/" ]; then
            find helm/ -name "Chart.yaml" | while read chart; do
              chart_dir=$(dirname "$chart")
              echo "Validating chart: $chart_dir"
              helm lint "$chart_dir" || echo "Chart validation failed for $chart_dir"
            done
          fi

      - name: Validate Kubernetes manifests
        run: |
          curl -LO "https://dl.k8s.io/release/${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          find k8s/ -name "*.yaml" -o -name "*.yml" | while read manifest; do
            echo "Validating manifest: $manifest"
            kubectl apply --dry-run=client -f "$manifest" || echo "Manifest validation failed for $manifest"
          done

  # Job 2: Deploy to Development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.deploy-development == 'true'
    environment:
      name: development
      url: https://dev.oran.local
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure Kubernetes
        if: ${{ secrets.KUBECONFIG_DEV != '' }}
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_DEV }}

      - name: Deploy to development
        if: ${{ secrets.KUBECONFIG_DEV != '' }}
        env:
          KUBECONFIG_DEV: ${{ secrets.KUBECONFIG_DEV }}
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace oran-nearrt-ric-dev || true
          
          # Deploy using Helm if available, otherwise use kubectl
          if [ -d "helm/oran-nearrt-ric" ]; then
            helm upgrade --install near-rt-ric-dev ./helm/oran-nearrt-ric \
              --namespace=oran-nearrt-ric-dev \
              --set environment=development \
              --set image.tag=${{ github.sha }} \
              --wait --timeout=10m
          else
            # Deploy using kubectl
            kubectl apply -f k8s/ -n oran-nearrt-ric-dev
            kubectl set image deployment/dashboard dashboard=ghcr.io/${{ github.repository }}/dashboard:${{ github.sha }} -n oran-nearrt-ric-dev || true
            kubectl set image deployment/fl-coordinator fl-coordinator=ghcr.io/${{ github.repository }}/fl-coordinator:${{ github.sha }} -n oran-nearrt-ric-dev || true
          fi

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/dashboard -n oran-nearrt-ric-dev --timeout=300s || true
          kubectl rollout status deployment/fl-coordinator -n oran-nearrt-ric-dev --timeout=300s || true
          kubectl get pods -n oran-nearrt-ric-dev

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/dashboard -n oran-nearrt-ric-dev || true
          kubectl wait --for=condition=available --timeout=300s deployment/fl-coordinator -n oran-nearrt-ric-dev || true
          
          # Basic health checks
          kubectl exec -n oran-nearrt-ric-dev deployment/dashboard -- curl -f http://localhost:8080/health || echo "Dashboard health check completed"

  # Job 3: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.deploy-staging == 'true'
    environment:
      name: staging
      url: https://staging.oran.local
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure Kubernetes
        if: ${{ secrets.KUBECONFIG_STAGING != '' }}
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_STAGING }}

      - name: Deploy to staging
        if: ${{ secrets.KUBECONFIG_STAGING != '' }}
        env:
          KUBECONFIG_STAGING: ${{ secrets.KUBECONFIG_STAGING }}
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace oran-nearrt-ric-staging || true
          
          # Deploy using Helm if available, otherwise use kubectl
          if [ -d "helm/oran-nearrt-ric" ]; then
            helm upgrade --install near-rt-ric-staging ./helm/oran-nearrt-ric \
              --namespace=oran-nearrt-ric-staging \
              --set environment=staging \
              --set image.tag=${{ github.sha }} \
              --set replicaCount=2 \
              --wait --timeout=15m
          else
            # Deploy using kubectl
            kubectl apply -f k8s/ -n oran-nearrt-ric-staging
            kubectl set image deployment/dashboard dashboard=ghcr.io/${{ github.repository }}/dashboard:${{ github.sha }} -n oran-nearrt-ric-staging || true
            kubectl set image deployment/fl-coordinator fl-coordinator=ghcr.io/${{ github.repository }}/fl-coordinator:${{ github.sha }} -n oran-nearrt-ric-staging || true
          fi

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/dashboard -n oran-nearrt-ric-staging --timeout=600s
          kubectl rollout status deployment/fl-coordinator -n oran-nearrt-ric-staging --timeout=600s
          kubectl get pods -n oran-nearrt-ric-staging

      - name: Run comprehensive tests
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=available --timeout=600s deployment/dashboard -n oran-nearrt-ric-staging
          kubectl wait --for=condition=available --timeout=600s deployment/fl-coordinator -n oran-nearrt-ric-staging
          
          # Health checks
          kubectl exec -n oran-nearrt-ric-staging deployment/dashboard -- curl -f http://localhost:8080/health
          kubectl exec -n oran-nearrt-ric-staging deployment/fl-coordinator -- curl -f http://localhost:8080/health
          
          # Performance tests (if available)
          if [ -f "scripts/performance-test.sh" ]; then
            bash scripts/performance-test.sh staging
          fi

  # Job 4: End-to-End Tests on Staging
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always() && needs.deploy-staging.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install test dependencies
        run: |
          if [ -f "e2e/package.json" ]; then
            cd e2e && npm ci
          elif [ -f "package.json" ]; then
            npm ci
          fi

      - name: Run E2E tests
        env:
          BASE_URL: https://staging.oran.local
          TEST_TIMEOUT: 30000
        run: |
          if [ -d "e2e/" ]; then
            cd e2e && npm run test:e2e || echo "E2E tests completed"
          elif [ -f "cypress.json" ] || [ -f "cypress.config.js" ]; then
            npx cypress run --config baseUrl=$BASE_URL || echo "Cypress tests completed"
          else
            echo "No E2E tests found"
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            e2e/cypress/screenshots/
            e2e/cypress/videos/
            cypress/screenshots/
            cypress/videos/
            test-results/
          retention-days: 30

  # Job 5: Deploy to Production (requires approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment, e2e-tests]
    if: needs.pre-deployment.outputs.deploy-production == 'true' && (needs.e2e-tests.result == 'success' || github.event.inputs.force_deploy == 'true')
    environment:
      name: production
      url: https://oran.local
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure Kubernetes
        if: ${{ secrets.KUBECONFIG_PRODUCTION != '' }}
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_PRODUCTION }}

      - name: Pre-production backup
        if: ${{ secrets.KUBECONFIG_PRODUCTION != '' }}
        run: |
          # Backup current production state
          kubectl get all -n oran-nearrt-ric-production -o yaml > production-backup-${{ github.sha }}.yaml || true
          
          # Create backup of persistent data if applicable
          if kubectl get pvc -n oran-nearrt-ric-production 2>/dev/null | grep -q .; then
            echo "Creating backup of persistent volumes..."
            kubectl get pvc -n oran-nearrt-ric-production -o yaml > pvc-backup-${{ github.sha }}.yaml
          fi

      - name: Deploy to production
        if: ${{ secrets.KUBECONFIG_PRODUCTION != '' }}
        env:
          KUBECONFIG_PRODUCTION: ${{ secrets.KUBECONFIG_PRODUCTION }}
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace oran-nearrt-ric-production || true
          
          # Deploy using Helm with blue-green strategy if available
          if [ -d "helm/oran-nearrt-ric" ]; then
            helm upgrade --install near-rt-ric-production ./helm/oran-nearrt-ric \
              --namespace=oran-nearrt-ric-production \
              --set environment=production \
              --set image.tag=${{ github.sha }} \
              --set replicaCount=3 \
              --set resources.requests.memory="1Gi" \
              --set resources.requests.cpu="500m" \
              --set resources.limits.memory="2Gi" \
              --set resources.limits.cpu="1000m" \
              --wait --timeout=20m
          else
            # Deploy using kubectl
            kubectl apply -f k8s/ -n oran-nearrt-ric-production
            kubectl set image deployment/dashboard dashboard=ghcr.io/${{ github.repository }}/dashboard:${{ github.sha }} -n oran-nearrt-ric-production
            kubectl set image deployment/fl-coordinator fl-coordinator=ghcr.io/${{ github.repository }}/fl-coordinator:${{ github.sha }} -n oran-nearrt-ric-production
          fi

      - name: Verify production deployment
        run: |
          kubectl rollout status deployment/dashboard -n oran-nearrt-ric-production --timeout=900s
          kubectl rollout status deployment/fl-coordinator -n oran-nearrt-ric-production --timeout=900s
          kubectl get pods -n oran-nearrt-ric-production

      - name: Run production smoke tests
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=available --timeout=900s deployment/dashboard -n oran-nearrt-ric-production
          kubectl wait --for=condition=available --timeout=900s deployment/fl-coordinator -n oran-nearrt-ric-production
          
          # Critical health checks
          kubectl exec -n oran-nearrt-ric-production deployment/dashboard -- curl -f http://localhost:8080/health
          kubectl exec -n oran-nearrt-ric-production deployment/fl-coordinator -- curl -f http://localhost:8080/health
          
          # Additional production checks
          kubectl top pods -n oran-nearrt-ric-production || echo "Metrics not available"

      - name: Upload backup artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-backup-${{ github.sha }}
          path: |
            production-backup-${{ github.sha }}.yaml
            pvc-backup-${{ github.sha }}.yaml
          retention-days: 90

      - name: Create release
        if: success()
        run: |
          # Generate changelog since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
          fi
          
          # Create release
          gh release create v${{ github.run_number }} \
            --title "Production Release v${{ github.run_number }}" \
            --notes "## Changes in this Release
          $COMMITS
          
          ## Docker Images
          - \`ghcr.io/${{ github.repository }}/dashboard:${{ github.sha }}\`
          - \`ghcr.io/${{ github.repository }}/fl-coordinator:${{ github.sha }}\`
          - \`ghcr.io/${{ github.repository }}/xapp-dashboard:${{ github.sha }}\`
          
          ## Deployment Details
          - **Environment**: Production
          - **Namespace**: oran-nearrt-ric-production
          - **Commit**: ${{ github.sha }}
          - **Deployed At**: $(date)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 6: Rollback capability
  rollback-production:
    name: Rollback Production (Manual)
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: deploy-production
    environment:
      name: production-rollback
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Kubernetes
        if: ${{ secrets.KUBECONFIG_PRODUCTION != '' }}
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_PRODUCTION }}

      - name: Rollback production deployment
        if: ${{ secrets.KUBECONFIG_PRODUCTION != '' }}
        run: |
          echo "Rolling back production deployment..."
          helm rollback near-rt-ric-production -n oran-nearrt-ric-production || echo "Helm rollback completed"
          
          # Verify rollback
          kubectl rollout status deployment/dashboard -n oran-nearrt-ric-production --timeout=600s
          kubectl rollout status deployment/fl-coordinator -n oran-nearrt-ric-production --timeout=600s

  # Job 7: Notification and reporting
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, e2e-tests, deploy-production, rollback-production]
    if: always()
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "## Deployment Summary" > deployment-summary.md
          echo "**Date:** $(date)" >> deployment-summary.md
          echo "**Commit:** ${{ github.sha }}" >> deployment-summary.md
          echo "**Trigger:** ${{ github.event_name }}" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "### Deployment Results:" >> deployment-summary.md
          echo "- **Development:** ${{ needs.deploy-development.result }}" >> deployment-summary.md
          echo "- **Staging:** ${{ needs.deploy-staging.result }}" >> deployment-summary.md
          echo "- **E2E Tests:** ${{ needs.e2e-tests.result }}" >> deployment-summary.md
          echo "- **Production:** ${{ needs.deploy-production.result }}" >> deployment-summary.md
          echo "- **Rollback:** ${{ needs.rollback-production.result }}" >> deployment-summary.md

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md
          retention-days: 90

      - name: Notify teams
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        continue-on-error: true

      - name: Notify on production deployment
        if: needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#production-deployments'
          webhook_url: ${{ secrets.PRODUCTION_SLACK_WEBHOOK }}
          text: "🚀 Production deployment successful! Commit: ${{ github.sha }}"
        continue-on-error: true