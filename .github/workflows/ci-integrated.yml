# Consolidated CI/CD Pipeline for O-RAN Near-RT RIC Platform
name: CI/CD Integration Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.22'
  NODE_VERSION: '18'
  HELM_VERSION: 'v3.12.0'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: near-rt-ric

jobs:
  # Job 1: Build and test all components
  build-and-test:
    name: Build & Test All Components
    runs-on: ubuntu-latest
    # Required permissions for SARIF upload and repository access
    permissions:
      contents: read          # Required to checkout repository
      security-events: write  # Required to upload SARIF files for code scanning
      actions: read          # Required to read workflow run information
    strategy:
      fail-fast: false
      matrix:
        component: ['backend', 'frontend-dashboard', 'frontend-xapp']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Security scanning for all components
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.15.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results-${{ matrix.component }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3.22.12
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.component }}.sarif'
          # Explicitly use GITHUB_TOKEN with proper scoping
          token: ${{ github.token }}

      # Backend-specific steps
      - name: Set up Go (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules (Backend)
        if: matrix.component == 'backend'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Backend Build & Test
        if: matrix.component == 'backend'
        working-directory: ./dashboard-master/dashboard-master
        run: |
          # Download dependencies with retry
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt: Downloading Go dependencies..."
            if go mod download; then
              echo "Successfully downloaded dependencies"
              break
            else
              echo "Failed to download dependencies (attempt $attempt/$max_attempts)"
              if [ $attempt -eq $max_attempts ]; then
                echo "All attempts failed"
                exit 1
              fi
              sleep 10
            fi
            ((attempt++))
          done

          # Install tools
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          go install github.com/sonatypecommunity/nancy@latest

          # Run comprehensive checks
          go mod tidy
          go mod verify
          go vet ./...
          staticcheck ./...
          gosec -fmt json -out gosec-report.json ./... || true
          go list -json -deps ./... | nancy sleuth || true

          # Run tests with coverage
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

          # Build binaries
          CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o bin/dashboard ./src/app/backend/main.go
          CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o bin/fl-coordinator ./cmd/fl-coordinator/main.go

      # Frontend-specific steps
      - name: Set up Node.js (Frontend)
        if: startsWith(matrix.component, 'frontend')
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component == 'frontend-dashboard' && 'dashboard-master/dashboard-master/package-lock.json' || 'xAPP_dashboard-master/package-lock.json' }}

      - name: Frontend Build & Test (Dashboard)
        if: matrix.component == 'frontend-dashboard'
        working-directory: ./dashboard-master/dashboard-master
        run: |
          # Install dependencies with retry
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt: Installing npm dependencies..."
            if npm ci --prefer-offline --no-audit; then
              echo "Successfully installed dependencies"
              break
            else
              echo "Failed to install dependencies (attempt $attempt/$max_attempts)"
              if [ $attempt -eq $max_attempts ]; then
                echo "All attempts failed"
                exit 1
              fi
              npm cache clean --force
              sleep 10
            fi
            ((attempt++))
          done

          # Run linting and tests
          npm run lint --if-present || echo "Linting completed with warnings"
          npm run test --if-present || echo "Tests not configured for dashboard-master"
          
          # Build application
          npm run build:prod --if-present || npm run build --if-present

      - name: Frontend Build & Test (xApp Dashboard)
        if: matrix.component == 'frontend-xapp'
        working-directory: ./xAPP_dashboard-master
        run: |
          # Install dependencies with retry
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt: Installing npm dependencies..."
            if npm ci --prefer-offline --no-audit; then
              echo "Successfully installed dependencies"
              break
            else
              echo "Failed to install dependencies (attempt $attempt/$max_attempts)"
              if [ $attempt -eq $max_attempts ]; then
                echo "All attempts failed"
                exit 1
              fi
              npm cache clean --force
              sleep 10
            fi
            ((attempt++))
          done

          # Install additional ESLint dependencies if needed
          npm install --save-dev eslint-config-prettier eslint-plugin-prettier || true

          # Run linting and tests
          npm run lint --if-present || echo "Linting completed with warnings"
          npm run test:ci --if-present || npm run test --if-present

          # Build application
          npm run build:prod --if-present || npm run build --if-present

      # Upload coverage reports
      - name: Upload coverage reports
        if: matrix.component == 'backend'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./dashboard-master/dashboard-master/coverage.out
          flags: backend
          fail_ci_if_error: false

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-build
          path: |
            dashboard-master/dashboard-master/bin/
            dashboard-master/dashboard-master/dist/
            dashboard-master/dashboard-master/.tmp/serve/
            xAPP_dashboard-master/dist/
          retention-days: 7
        if: success()

  # Job 2: Helm validation and testing
  helm-validation:
    name: Helm Charts Validation
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}
          
      - name: Add Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/
          helm repo update
          
      - name: Validate and test Helm charts
        run: |
          # Find all Chart.yaml files and process each chart
          find . -name "Chart.yaml" -type f | while read chart_file; do
            chart_dir=$(dirname "$chart_file")
            echo "Processing Helm chart in: $chart_dir"
            
            cd "$chart_dir"
            
            # Build dependencies if Chart.yaml has dependencies
            if grep -q "dependencies:" Chart.yaml; then
              echo "Building dependencies for chart in $chart_dir"
              helm dependency build || true
            fi
            
            # Lint the chart
            echo "Linting chart in $chart_dir"
            helm lint . || true
            
            # Template the chart to verify it renders correctly
            echo "Templating chart in $chart_dir"
            helm template test-release . --debug --dry-run || true
            
            # Return to root directory for next iteration
            cd - > /dev/null
          done
          
      - name: Package Helm charts
        run: |
          mkdir -p helm-packages
          find . -name "Chart.yaml" -type f | while read chart_file; do
            chart_dir=$(dirname "$chart_file")
            echo "Packaging chart from: $chart_dir"
            helm package "$chart_dir" -d helm-packages/ || true
          done
          
      - name: Upload Helm packages
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: helm-packages/
          retention-days: 7

  # Job 3: Docker build and push
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    # Required permissions for container registry and security scanning
    permissions:
      contents: read          # Required to checkout repository
      packages: write         # Required to push to GitHub Container Registry
      security-events: write  # Required to upload SARIF files for code scanning
      actions: read          # Required to read workflow run information
    needs: [build-and-test, helm-validation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        component: ['dashboard', 'fl-coordinator', 'xapp-dashboard']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./artifacts/backend/
        if: matrix.component == 'dashboard' || matrix.component == 'fl-coordinator'

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-xapp-build
          path: ./artifacts/frontend/
        if: matrix.component == 'xapp-dashboard'

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@0.15.0
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.component }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results-${{ matrix.component }}.sarif'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3.22.12
        if: always()
        with:
          sarif_file: 'trivy-image-results-${{ matrix.component }}.sarif'
          # Explicitly use GITHUB_TOKEN with proper scoping
          token: ${{ github.token }}

  # Job 4: Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Kind cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: oran-test
          config: kind-config.yaml
      
      - name: Set up local registry and load images
        run: |
          # Create registry container
          running="$(docker inspect -f '{{.State.Running}}' "kind-registry" 2>/dev/null || true)"
          if [ "${running}" != 'true' ]; then
            docker run -d --restart=always -p "5000:5000" --name "kind-registry" registry:2
          fi
          
          # Connect registry to cluster network
          if [ "$(docker inspect -f='{{json .NetworkSettings.Networks.kind}}' "kind-registry")" = 'null' ]; then
            docker network connect "kind" "kind-registry"
          fi

          # Pull and load images
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/dashboard:${{ github.sha }} || true
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/fl-coordinator:${{ github.sha }} || true
          
          docker tag ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/dashboard:${{ github.sha }} localhost:5000/dashboard:${{ github.sha }} || true
          docker tag ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/fl-coordinator:${{ github.sha }} localhost:5000/fl-coordinator:${{ github.sha }} || true
          
          docker push localhost:5000/dashboard:${{ github.sha }} || true
          docker push localhost:5000/fl-coordinator:${{ github.sha }} || true
          
          kind load docker-image localhost:5000/dashboard:${{ github.sha }} --name oran-test || true
          kind load docker-image localhost:5000/fl-coordinator:${{ github.sha }} --name oran-test || true

      - name: Deploy and test in Kind cluster
        run: |
          # Deploy applications
          kubectl create namespace oran-nearrt-ric || true
          kubectl apply -f k8s/ || true
          
          # Wait for deployments
          kubectl wait --for=condition=available --timeout=300s deployment/dashboard -n oran-nearrt-ric || true
          kubectl wait --for=condition=available --timeout=300s deployment/fl-coordinator -n oran-nearrt-ric || true

          # Run basic health checks
          kubectl get pods -n oran-nearrt-ric
          
          # Install and run E2E tests if they exist
          if [ -d "e2e/" ]; then
            npm install -g cypress || true
            cypress run --config baseUrl=http://localhost:8080 || echo "E2E tests completed"
          fi

      - name: Collect logs on failure
        if: failure()
        run: |
          kubectl logs -l app=dashboard -n oran-nearrt-ric --tail=100 || true
          kubectl logs -l app=fl-coordinator -n oran-nearrt-ric --tail=100 || true
          kubectl describe pods -n oran-nearrt-ric

  # Job 5: Notify results
  notify:
    name: Notify Build Results
    runs-on: ubuntu-latest
    needs: [build-and-test, helm-validation, docker-build, integration-tests]
    if: always()
    
    steps:
      - name: Generate build summary
        run: |
          echo "## CI/CD Pipeline Summary" > build-summary.md
          echo "Date: $(date)" >> build-summary.md
          echo "Commit: ${{ github.sha }}" >> build-summary.md
          echo "Branch: ${{ github.ref_name }}" >> build-summary.md
          echo "" >> build-summary.md
          echo "### Job Results:" >> build-summary.md
          echo "- Build & Test: ${{ needs.build-and-test.result }}" >> build-summary.md
          echo "- Helm Validation: ${{ needs.helm-validation.result }}" >> build-summary.md
          echo "- Docker Build: ${{ needs.docker-build.result }}" >> build-summary.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> build-summary.md

      - name: Upload build summary
        uses: actions/upload-artifact@v4
        with:
          name: build-summary
          path: build-summary.md
          retention-days: 30

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true