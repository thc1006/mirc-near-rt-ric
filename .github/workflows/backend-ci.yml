# Backend CI Pipeline with Go Authentication
name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'dashboard-master/**'
      - 'pkg/**'
      - 'cmd/**'
      - '*.go'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches: [main]
    paths:
      - 'dashboard-master/**'
      - 'pkg/**'
      - 'cmd/**'
      - '*.go'
      - 'go.mod'
      - 'go.sum'

env:
  GO_VERSION: '1.22'
  GOPRIVATE: 'github.com/hctsai1006/*'

jobs:
  backend-build-test:
    name: Backend Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - dashboard-master/dashboard-master
          - .
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            ${{ matrix.component }}/go.sum
            go.sum

      - name: Configure Git for Go modules
        run: |
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}:x-oauth-basic@github.com/".insteadOf "git@github.com:"

      - name: Configure Go environment
        run: |
          go env -w GOPRIVATE="${{ env.GOPRIVATE }}"
          go env -w GOPROXY="https://proxy.golang.org,direct"
          go env -w GOSUMDB="sum.golang.org"

      - name: Verify Go configuration
        run: |
          echo "Go version: $(go version)"
          echo "GOPATH: $(go env GOPATH)"
          echo "GOCACHE: $(go env GOCACHE)"
          echo "GOPRIVATE: $(go env GOPRIVATE)"
          echo "GOPROXY: $(go env GOPROXY)"

      - name: Download Go modules
        working-directory: ${{ matrix.component }}
        run: |
          # Retry mechanism for module downloads
          for i in {1..3}; do
            echo "Attempt $i: Downloading Go modules..."
            if go mod download; then
              echo "‚úÖ Go modules downloaded successfully"
              break
            else
              echo "‚ùå Attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
            if [ $i -eq 3 ]; then
              echo "‚ùå Failed to download Go modules after 3 attempts"
              exit 1
            fi
          done

      - name: Verify Go modules
        working-directory: ${{ matrix.component }}
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code go.mod go.sum || (echo "‚ùå go.mod/go.sum not tidy" && exit 1)

      - name: Install security tools with retry
        run: |
          # Function to install Go tools with retry
          install_with_retry() {
            local tool=$1
            local max_attempts=3
            
            for i in $(seq 1 $max_attempts); do
              echo "Installing $tool (attempt $i/$max_attempts)..."
              if go install "$tool"; then
                echo "‚úÖ Successfully installed $tool"
                return 0
              else
                echo "‚ùå Failed to install $tool (attempt $i/$max_attempts)"
                if [ $i -lt $max_attempts ]; then
                  echo "Retrying in 10 seconds..."
                  sleep 10
                fi
              fi
            done
            echo "‚ùå Failed to install $tool after $max_attempts attempts"
            return 1
          }
          
          # Install security scanning tools
          install_with_retry "github.com/securecodewarrior/gosec/v2/cmd/gosec@latest"
          install_with_retry "golang.org/x/vuln/cmd/govulncheck@latest"
          install_with_retry "github.com/golangci/golangci-lint/cmd/golangci-lint@latest"

      - name: Run Go linting
        working-directory: ${{ matrix.component }}
        run: |
          # Run golangci-lint with retry
          for i in {1..2}; do
            if golangci-lint run --timeout=10m ./...; then
              echo "‚úÖ Linting passed"
              break
            else
              echo "‚ùå Linting failed (attempt $i/2)"
              if [ $i -eq 2 ]; then
                echo "‚ùå Final linting attempt failed"
                exit 1
              fi
              sleep 5
            fi
          done

      - name: Run security scan
        working-directory: ${{ matrix.component }}
        run: |
          echo "üîç Running gosec security scan..."
          gosec -fmt sarif -out gosec-results.sarif ./... || echo "Security scan completed with findings"
          
          echo "üîç Running vulnerability check..."
          govulncheck ./... || echo "Vulnerability check completed"
        continue-on-error: true

      - name: Upload security scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ matrix.component }}/gosec-results.sarif
          category: gosec-${{ matrix.component }}
        continue-on-error: true

      - name: Build Go binary
        working-directory: ${{ matrix.component }}
        run: |
          echo "üî® Building Go binary..."
          if [ -f "main.go" ]; then
            go build -v -ldflags="-s -w" -o app .
          elif [ -d "cmd" ]; then
            for cmd_dir in cmd/*; do
              if [ -d "$cmd_dir" ]; then
                cmd_name=$(basename "$cmd_dir")
                echo "Building $cmd_name..."
                go build -v -ldflags="-s -w" -o "$cmd_name" "./$cmd_dir"
              fi
            done
          else
            echo "No main.go or cmd directory found, running go build on current directory"
            go build -v ./...
          fi

      - name: Run Go tests
        working-directory: ${{ matrix.component }}
        run: |
          echo "üß™ Running Go tests..."
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        if: matrix.component == 'dashboard-master/dashboard-master'
        uses: codecov/codecov-action@v4
        with:
          files: ${{ matrix.component }}/coverage.out
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.component }}-${{ github.sha }}
          path: |
            ${{ matrix.component }}/app
            ${{ matrix.component }}/dashboard
            ${{ matrix.component }}/fl-coordinator
            ${{ matrix.component }}/coverage.out
          retention-days: 7

  # Build Docker images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: backend-build-test
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        image:
          - name: dashboard
            dockerfile: docker/Dockerfile.dashboard
            context: .
          - name: fl-coordinator
            dockerfile: docker/Dockerfile.fl-coordinator
            context: .
          - name: xapp-dashboard
            dockerfile: docker/Dockerfile.xapp-dashboard
            context: .
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Git for Docker builds
        run: |
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: false
          tags: |
            ${{ matrix.image.name }}:latest
            ${{ matrix.image.name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
            BUILDKIT_INLINE_CACHE=1

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ matrix.image.name }}:latest
          format: 'sarif'
          output: 'trivy-${{ matrix.image.name }}.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-${{ matrix.image.name }}.sarif
          category: trivy-${{ matrix.image.name }}
        continue-on-error: true