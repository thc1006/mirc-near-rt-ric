name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  # Lint and validate code quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download Go dependencies
      run: go mod download
      
    - name: Verify Go modules
      run: go mod verify
      
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
        
    - name: Run go vet
      run: go vet ./...
      
    - name: Check Go formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: ./...
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Unit and integration tests
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: near_rt_ric_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download Go dependencies
      run: go mod download
      
    - name: Create test configuration
      run: |
        mkdir -p /tmp/near-rt-ric
        cat > /tmp/near-rt-ric/test-config.yaml << EOF
        global:
          environment: test
          node_id: test-node
          cluster_id: test-cluster
        database:
          host: localhost
          port: 5432
          database: near_rt_ric_test
          username: postgres
          password: postgres
        redis:
          address: localhost:6379
        logging:
          level: debug
          format: json
        security:
          encryption_key: test-encryption-key-32-characters
          session_secret: test-session-secret-32-characters
        e2:
          enabled: false  # Skip E2 tests in CI
        a1:
          auth:
            jwt:
              secret_key: test-jwt-secret-key
        o1:
          enabled: false  # Skip O1 tests in CI
        EOF
        
    - name: Run unit tests
      env:
        RIC_CONFIG: /tmp/near-rt-ric/test-config.yaml
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: near_rt_ric_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -func=coverage.out
        
    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')
        echo "Test coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 80.0" | bc -l) )); then
          echo "Test coverage is below 80%. Current coverage: ${COVERAGE}%"
          exit 1
        fi
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Build and publish container images
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
        
    - name: Upload image scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Helm chart linting and testing
  helm:
    name: Helm Charts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.13.0'
        
    - name: Lint Helm charts
      run: |
        helm lint helm/oran-nearrt-ric
        helm lint helm/observability-stack
        
    - name: Set up chart-testing
      uses: helm/chart-testing-action@v2.6.1
      
    - name: Run chart-testing (list-changed)
      id: list-changed
      run: |
        changed=$(ct list-changed --config .github/ct.yaml)
        if [[ -n "$changed" ]]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Run chart-testing (lint)
      if: steps.list-changed.outputs.changed == 'true'
      run: ct lint --config .github/ct.yaml
      
    - name: Create kind cluster
      if: steps.list-changed.outputs.changed == 'true'
      uses: helm/kind-action@v1.8.0
      with:
        config: kind-config.yaml
        
    - name: Run chart-testing (install)
      if: steps.list-changed.outputs.changed == 'true'
      run: ct install --config .github/ct.yaml

  # Integration tests with real services
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        config: kind-config.yaml
        cluster_name: near-rt-ric-test
        
    - name: Load Docker image to kind
      run: |
        IMAGE_TAG=${{ github.sha }}
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
        kind load docker-image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} --name near-rt-ric-test
        
    - name: Deploy to kind cluster
      run: |
        helm install near-rt-ric helm/oran-nearrt-ric \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set global.environment=integration \
          --wait --timeout=10m
          
    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=near-rt-ric --timeout=300s
        
    - name: Run integration tests
      run: |
        # Health check
        kubectl port-forward svc/near-rt-ric 8081:8081 &
        sleep 5
        curl -f http://localhost:8081/health || exit 1
        
        # A1 interface test
        kubectl port-forward svc/near-rt-ric 10020:10020 &
        sleep 5
        curl -f http://localhost:10020/a1-p/healthcheck || exit 1
        
    - name: Collect logs
      if: always()
      run: |
        kubectl logs -l app.kubernetes.io/name=near-rt-ric --tail=1000 > integration-logs.txt
        
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: integration-logs
        path: integration-logs.txt

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.13.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to staging
      env:
        KUBECONFIG: kubeconfig
      run: |
        helm upgrade --install near-rt-ric-staging helm/oran-nearrt-ric \
          --namespace near-rt-ric-staging \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set global.environment=staging \
          --set ingress.enabled=true \
          --set ingress.hosts[0].host=staging-nearrt-ric.example.com \
          --wait --timeout=15m

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.13.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to production
      env:
        KUBECONFIG: kubeconfig
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        helm upgrade --install near-rt-ric-prod helm/oran-nearrt-ric \
          --namespace near-rt-ric-production \
          --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=v${VERSION} \
          --set global.environment=production \
          --set replicaCount=3 \
          --set ingress.enabled=true \
          --set ingress.hosts[0].host=nearrt-ric.example.com \
          --set ingress.tls[0].secretName=nearrt-ric-tls \
          --set monitoring.enabled=true \
          --wait --timeout=20m

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## Changes in this Release
          
          - Production-ready O-RAN Near-RT RIC implementation
          - Full E2, A1, and O1 interface support
          - Enhanced security with JWT authentication
          - Comprehensive monitoring and observability
          - Multi-architecture container images (AMD64/ARM64)
          
          ## Container Images
          
          - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
          
          ## Helm Charts
          
          ```bash
          helm repo add near-rt-ric https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}
          helm install near-rt-ric near-rt-ric/oran-nearrt-ric
          ```