# Comprehensive Security Scanning and Compliance Workflow
name: Security & Compliance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  # Static Application Security Testing (SAST)
  sast:
    name: Static Analysis Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: go, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/kubernetes
            p/go
            p/javascript

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run nancy (Go dependency scanner)
        working-directory: ./dashboard-master/dashboard-master
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go mod download
          go list -json -deps ./... | nancy sleuth || echo "Nancy scan completed with warnings"

      - name: Run npm audit
        run: |
          if [ -f "dashboard-master/dashboard-master/package.json" ]; then
            cd dashboard-master/dashboard-master && npm audit --audit-level=moderate || echo "npm audit completed with warnings"
            cd ../..
          fi
          if [ -f "xAPP_dashboard-master/package.json" ]; then
            cd xAPP_dashboard-master && npm audit --audit-level=moderate || echo "npm audit completed with warnings"
          fi

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Run OSV Scanner
        uses: google/osv-scanner-action@v2.1.0
        with:
          scan-args: |-
            -r
            --skip-git
            .
          upload-results: true
        continue-on-error: true

  # Infrastructure as Code security scanning
  iac-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: kubernetes,dockerfile,helm
          output_format: sarif
          output_file_path: checkov.sarif
          soft_fail: true

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov.sarif

      - name: Run kube-score
        run: |
          wget https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64.tar.gz
          tar -xzf kube-score_1.16.1_linux_amd64.tar.gz
          chmod +x kube-score
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs ./kube-score score || echo "Kube-score analysis completed"

      - name: Run kubesec
        run: |
          curl -sSX POST \
            --data-binary @k8s/fl-coordinator-deployment.yaml \
            https://v2.kubesec.io/scan || echo "Kubesec scan completed"

      - name: Kubernetes Security Benchmark
        run: |
          # Install kube-bench
          curl -L https://github.com/aquasecurity/kube-bench/releases/download/v0.6.15/kube-bench_0.6.15_linux_amd64.tar.gz | tar -xzv
          chmod +x kube-bench
          # Note: This would run in actual cluster
          echo "Kube-bench would run security benchmarks in deployed cluster"

  # Container image security scanning
  image-scan:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images for scanning
        run: |
          docker build -t test-dashboard -f docker/Dockerfile.dashboard . || echo "Dashboard build failed"
          docker build -t test-fl-coordinator -f docker/Dockerfile.fl-coordinator . || echo "FL coordinator build failed"
          docker build -t test-xapp-dashboard -f docker/Dockerfile.xapp-dashboard . || echo "xApp dashboard build failed"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.32.0
        with:
          image-ref: test-dashboard
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Run Trivy on FL coordinator
        uses: aquasecurity/trivy-action@v0.32.0
        with:
          image-ref: test-fl-coordinator
          format: 'sarif'
          output: 'trivy-fl-coordinator.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: test-dashboard
          severity-cutoff: medium
          fail-build: false

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: test-dashboard
          only-severities: critical,high
          write-comment: false
        continue-on-error: true

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline || echo "Detect-secrets scan completed"

  # License compliance scanning
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check Go licenses
        working-directory: ./dashboard-master/dashboard-master
        run: |
          go-licenses check ./... || echo "Go license check completed with warnings"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check Node.js licenses
        run: |
          if [ -f "dashboard-master/dashboard-master/package.json" ]; then
            cd dashboard-master/dashboard-master && license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' || echo "License check completed with warnings"
            cd ../..
          fi
          if [ -f "xAPP_dashboard-master/package.json" ]; then
            cd xAPP_dashboard-master && license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' || echo "License check completed with warnings"
          fi

      - name: FOSSA License Scan
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
        continue-on-error: true

  # Security policy compliance
  compliance-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy files
        run: |
          test -f SECURITY.md || (echo "SECURITY.md not found" && exit 1)
          test -f .github/SECURITY.md || echo ".github/SECURITY.md not found (optional)"

      - name: Validate Kubernetes security policies
        run: |
          # Check for PodSecurityPolicies or SecurityContexts
          grep -r "securityContext\|runAsNonRoot\|readOnlyRootFilesystem" k8s/ || echo "Security contexts should be defined"
          
          # Check for NetworkPolicies
          find k8s/ -name "*network-policy*" || echo "NetworkPolicies should be defined"

      - name: Check RBAC configurations
        run: |
          grep -r "ClusterRole\|Role\|RoleBinding\|ClusterRoleBinding" k8s/ && echo "RBAC found" || echo "RBAC configurations missing"

      - name: Validate Helm security best practices
        run: |
          # Check Helm charts for security best practices
          if [ -d "helm/" ]; then
            find helm/ -name "*.yaml" | xargs grep -l "securityContext" || echo "Security contexts missing in Helm charts"
            find helm/ -name "*.yaml" | xargs grep -l "runAsNonRoot" || echo "runAsNonRoot missing in Helm charts"
          fi

      - name: Check Docker security best practices
        run: |
          # Check Dockerfiles for security best practices
          find docker/ -name "Dockerfile*" | xargs grep -l "USER" || echo "Non-root user not specified in Dockerfiles"
          find docker/ -name "Dockerfile*" | xargs grep -L "ADD\|COPY --chown" || echo "File ownership practices could be improved"

  # Supply chain security
  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SLSA verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.4.1
        continue-on-error: true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: ./*.spdx.json

      - name: Scorecard analysis
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload Scorecard results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # CI validation including documentation checks
  ci-validation:
    name: CI Validation and Documentation Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for markdown tools
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install markdown-link-check
        run: npm install -g markdown-link-check

      - name: Check markdown links in all files
        run: |
          echo "Checking markdown links across repository..."
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            echo "Checking: $file"
            markdown-link-check "$file" || exit 1
          done

      - name: Validate YAML syntax in workflows
        run: |
          echo "Validating GitHub Actions workflow YAML syntax..."
          find .github/workflows/ -name "*.yml" -o -name "*.yaml" | while read file; do
            echo "Validating: $file"
            python -c "import yaml; yaml.safe_load(open('$file'))" || exit 1
          done

      - name: Check Kubernetes manifests syntax
        run: |
          echo "Validating Kubernetes YAML syntax..."
          find k8s/ helm/ -name "*.yml" -o -name "*.yaml" | while read file; do
            echo "Validating: $file"
            python -c "import yaml; yaml.safe_load(open('$file'))" || exit 1
          done

      - name: Validate Docker syntax
        run: |
          echo "Validating Dockerfile syntax..."
          find . -name "Dockerfile*" | while read file; do
            echo "Validating: $file"
            docker run --rm -i hadolint/hadolint < "$file" || echo "Dockerfile validation completed with warnings"
          done

  # Generate comprehensive security report
  security-report:
    name: Security Report Generation
    runs-on: ubuntu-latest
    needs: [sast, dependency-scan, iac-scan, image-scan, secret-scan, license-scan, compliance-check, supply-chain-security, ci-validation]
    if: always()
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "**Date:** $(date)" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results:" >> security-report.md
          echo "- **SAST:** ${{ needs.sast.result }}" >> security-report.md
          echo "- **Dependency Scan:** ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- **IaC Scan:** ${{ needs.iac-scan.result }}" >> security-report.md
          echo "- **Image Scan:** ${{ needs.image-scan.result }}" >> security-report.md
          echo "- **Secret Scan:** ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- **License Scan:** ${{ needs.license-scan.result }}" >> security-report.md
          echo "- **Compliance Check:** ${{ needs.compliance-check.result }}" >> security-report.md
          echo "- **Supply Chain Security:** ${{ needs.supply-chain-security.result }}" >> security-report.md
          echo "- **CI Validation:** ${{ needs.ci-validation.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Recommendations:" >> security-report.md
          echo "- Review all security findings in the Security tab" >> security-report.md
          echo "- Address any high or critical vulnerabilities" >> security-report.md
          echo "- Ensure all security policies are properly configured" >> security-report.md
          echo "- Regularly update dependencies" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

      - name: Create security issue on failures
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Security Scan Failures Detected',
              body: 'Security scans have detected failures. Please review the Security tab and address any critical issues.',
              labels: ['security', 'high-priority']
            })

      - name: Notify security team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#security'
          webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
        continue-on-error: true