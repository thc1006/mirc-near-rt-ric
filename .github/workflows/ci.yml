name: O-RAN Near-RT RIC CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
    paths:
      - 'pkg/**'
      - 'cmd/**'
      - '*.go'
      - 'go.mod'
      - 'go.sum'
      - 'xAPP_dashboard-master/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'pkg/**'
      - 'cmd/**'
      - '*.go'
      - 'go.mod'
      - 'go.sum'
      - 'xAPP_dashboard-master/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OSV Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: |-
          --recursive
          --skip-git
          ./

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'

  go-backend-build-test:
    name: Go Backend Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - .
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            ${{ matrix.component }}/go.sum
            go.sum

      - name: Configure Git for Go modules
        run: |
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}:x-oauth-basic@github.com/".insteadOf "git@github.com:"

      - name: Configure Go environment
        run: |
          go env -w GOPRIVATE="${{ env.GOPRIVATE }}"
          go env -w GOPROXY="https://proxy.golang.org,direct"
          go env -w GOSUMDB="sum.golang.org"

      - name: Verify Go configuration
        run: |
          echo "Go version: $(go version)"
          echo "GOPATH: $(go env GOPATH)"
          echo "GOCACHE: $(go env GOCACHE)"
          echo "GOPRIVATE: $(go env GOPRIVATE)"
          echo "GOPROXY: $(go env GOPROXY)"

      - name: Download Go modules
        working-directory: ${{ matrix.component }}
        run: |
          # Retry mechanism for module downloads
          for i in {1..3}; do
            echo "Attempt $i: Downloading Go modules..."
            if go mod download; then
              echo "‚úÖ Go modules downloaded successfully"
              break
            else
              echo "‚ùå Attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
            if [ $i -eq 3 ]; then
              echo "‚ùå Failed to download Go modules after 3 attempts"
              exit 1
            fi
          done

      - name: Verify Go modules
        working-directory: ${{ matrix.component }}
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code go.mod go.sum || (echo "‚ùå go.mod/go.sum not tidy" && exit 1)

      - name: Install security tools with retry
        run: |
          # Function to install Go tools with retry
          install_with_retry() {
            local tool=$1
            local max_attempts=3
            
            for i in $(seq 1 $max_attempts); do
              echo "Installing $tool (attempt $i/$max_attempts)..."
              if go install "$tool"; then
                echo "‚úÖ Successfully installed $tool"
                return 0
              else
                echo "‚ùå Failed to install $tool (attempt $i/$max_attempts)"
                if [ $i -lt $max_attempts ]; then
                  echo "Retrying in 10 seconds..."
                  sleep 10
                fi
              fi
            done
            echo "‚ùå Failed to install $tool after $max_attempts attempts"
            return 1
          }
          
          # Install security scanning tools
          install_with_retry "github.com/securecodewarrior/gosec/v2/cmd/gosec@latest"
          install_with_retry "golang.org/x/vuln/cmd/govulncheck@latest"
          install_with_retry "github.com/golangci/golangci-lint/cmd/golangci-lint@latest"

      - name: Run Go linting
        working-directory: ${{ matrix.component }}
        run: |
          # Run golangci-lint with retry
          for i in {1..2}; do
            if golangci-lint run --timeout=10m ./...; then
              echo "‚úÖ Linting passed"
              break
            else
              echo "‚ùå Linting failed (attempt $i/2)"
              if [ $i -eq 2 ]; then
                echo "‚ùå Final linting attempt failed"
                exit 1
              fi
              sleep 5
            fi
          done

      - name: Run security scan
        working-directory: ${{ matrix.component }}
        run: |
          echo "üîç Running gosec security scan..."
          gosec -fmt sarif -out gosec-results.sarif ./... || echo "Security scan completed with findings"
          
          echo "üîç Running vulnerability check..."
          govulncheck ./... || echo "Vulnerability check completed"
        continue-on-error: true

      - name: Upload security scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: ${{ matrix.component }}/gosec-results.sarif
          category: gosec-${{ matrix.component }}
        continue-on-error: true

      - name: Build Go binary
        working-directory: ${{ matrix.component }}
        run: |
          echo "üî® Building Go binary..."
          if [ -f "main.go" ]; then
            go build -v -ldflags="-s -w" -o app .
          elif [ -d "cmd" ]; then
            for cmd_dir in cmd/*; do
              if [ -d "$cmd_dir" ]; then
                cmd_name=$(basename "$cmd_dir")
                echo "Building $cmd_name..."
                go build -v -ldflags="-s -w" -o "$cmd_name" "./$cmd_dir"
              fi
            done
          else
            echo "No main.go or cmd directory found, running go build on current directory"
            go build -v ./...
          fi

      - name: Run Go tests
        working-directory: ${{ matrix.component }}
        run: |
          echo "üß™ Running Go tests..."
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ${{ matrix.component }}/coverage.out
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.component }}-${{ github.sha }}
          path: |
            ${{ matrix.component }}/app
            ${{ matrix.component }}/coverage.out
          retention-days: 7

  node-frontend-build-test:
    name: Frontend Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - path: xAPP_dashboard-master
            name: xapp-dashboard

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component.path }}/package-lock.json

      - name: Check if directory exists
        run: |
          if [ ! -d "${{ matrix.component.path }}" ]; then
            echo "‚ùå Directory ${{ matrix.component.path }} does not exist"
            exit 1
          fi
          echo "‚úÖ Directory ${{ matrix.component.path }} exists"

      - name: Fix package-lock.json synchronization
        working-directory: ${{ matrix.component.path }}
        run: |
          echo "üîß Fixing NPM package synchronization..."
          
          # Remove node_modules and package-lock.json if they exist
          rm -rf node_modules package-lock.json
          
          # Clear npm cache
          npm cache clean --force
          
          # Regenerate package-lock.json from package.json
          echo "üì¶ Regenerating package-lock.json from package.json..."
          npm install --package-lock-only
          
          # Verify the lock file was created
          if [ ! -f "package-lock.json" ]; then
            echo "‚ùå Failed to generate package-lock.json"
            exit 1
          fi
          
          echo "‚úÖ package-lock.json regenerated successfully"

      - name: Install dependencies with retry
        working-directory: ${{ matrix.component.path }}
        run: |
          echo "üì¶ Installing dependencies..."
          
          # Function to install with retry
          install_with_retry() {
            local tool=$1
            local max_attempts=3
            
            for i in $(seq 1 $max_attempts); do
              echo "Installation attempt $i/$max_attempts..."
              
              if npm ci --prefer-offline --no-audit --no-fund; then
                echo "‚úÖ Dependencies installed successfully"
                return 0
              else
                echo "‚ùå Installation attempt $i failed"
                if [ $i -lt $max_attempts ]; then
                  echo "Retrying in $delay seconds..."
                  sleep $delay
                  # Clean up and try again
                  rm -rf node_modules
                  npm cache clean --force
                else
                  echo "‚ùå All installation attempts failed"
                  return 1
                fi
              fi
            done
          }
          
          # Try npm ci first, fall back to npm install if it fails
          if ! install_with_retry; then
            echo "üîÑ npm ci failed, trying npm install as fallback..."
            rm -rf node_modules package-lock.json
            npm install --no-audit --no-fund
          fi

      - name: Verify dependencies
        working-directory: ${{ matrix.component.path }}
        run: |
          echo "üîç Verifying dependency installation..."
          npm list --depth=0 || echo "Some dependency issues detected, but continuing..."
          
          # Check for critical Angular dependencies
          if ! npm list @angular/core > /dev/null 2>&1; then
            echo "‚ùå Critical Angular dependency missing"
            exit 1
          fi
          
          echo "‚úÖ Dependencies verified"

      - name: Run linting
        working-directory: ${{ matrix.component.path }}
        run: |
          echo "üîç Running ESLint..."
          if [ -f ".eslintrc.json" ] || [ -f ".eslintrc.js" ] || [ -f "eslint.config.js" ]; then
            npm run lint || echo "Linting completed with warnings"
          else
            echo "No ESLint configuration found, skipping linting"
          fi

      - name: Run Prettier check
        working-directory: ${{ matrix.component.path }}
        run: |
          echo "üé® Checking code formatting..."
          if npm run format:check > /dev/null 2>&1; then
            npm run format:check || echo "Formatting check completed with issues"
          else
            echo "No Prettier check script found, skipping formatting check"
          fi

      - name: Build application
        working-directory: ${{ matrix.component.path }}
        run: |
          echo "üî® Building application..."
          
          # Try production build first, fall back to development build
          if npm run build:prod > /dev/null 2>&1; then
            npm run build:prod
          elif npm run build > /dev/null 2>&1; then
            npm run build
          else
            echo "‚ùå No build script found"
            exit 1
          fi
          
          echo "‚úÖ Build completed successfully"

      - name: Run unit tests
        working-directory: ${{ matrix.component.path }}
        run: |
          echo "üß™ Running unit tests..."
          
          # Install Chrome for headless testing
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Run tests
          if npm run test:ci > /dev/null 2>&1; then
            npm run test:ci
          elif npm run test > /dev/null 2>&1; then
            npm run test -- --browsers=ChromeHeadless --watch=false
          else
            echo "No test script found, skipping tests"
          fi

      - name: Run E2E tests
        working-directory: ${{ matrix.component.path }}
        if: matrix.component.name == 'xapp-dashboard'
        run: |
          echo "üé≠ Running E2E tests..."
          
          # Start the application in background
          npm start &
          APP_PID=$!
          
          # Wait for app to start
          echo "Waiting for application to start..."
          timeout 60 bash -c 'until curl -f http://localhost:4200; do sleep 2; done' || echo "App may not have started properly"
          
          # Run Cypress tests
          if npm run e2e:ci > /dev/null 2>&1; then
            npm run e2e:ci || echo "E2E tests completed with failures"
          else
            echo "No E2E test script found, skipping E2E tests"
          fi
          
          # Clean up
          kill $APP_PID || true
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.component.name }}
          path: |\
            ${{ matrix.component.path }}/coverage/
            ${{ matrix.component.path }}/cypress/screenshots/
            ${{ matrix.component.path }}/cypress/videos/
            ${{ matrix.component.path }}/test-results/
          retention-days: 30

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.component.name }}-${{ github.sha }}
          path: |\
            ${{ matrix.component.path }}/dist/
            ${{ matrix.component.path }}/build/
          retention-days: 7

      - name: Upload coverage to Codecov
        if: matrix.component.name == 'xapp-dashboard'
        uses: codecov/codecov-action@v4
        with:
          files: ${{ matrix.component.path }}/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

  node-security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: node-frontend-build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit on xAPP dashboard
        working-directory: xAPP_dashboard-master
        run: |
          echo "üîí Running npm security audit..."
          
          # Fix package-lock.json first
          rm -rf node_modules package-lock.json
          npm install --package-lock-only
          
          # Run audit
          npm audit --audit-level=moderate || echo "Audit completed with findings"
          
          # Generate audit report
          npm audit --json > npm-audit-report.json || true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: |
            xAPP_dashboard-master/npm-audit-report.json
          retention-days: 30

  node-bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: node-frontend-build-test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Analyze bundle size
        working-directory: xAPP_dashboard-master
        run: |
          echo "üìä Analyzing bundle size..."
          
          # Fix package-lock.json and install
          rm -rf node_modules package-lock.json
          npm install --package-lock-only
          npm ci --prefer-offline --no-audit --no-fund
          
          # Build with stats
          npm run build:prod -- --stats-json
          
          # Analyze bundle if webpack-bundle-analyzer is available
          if npm list webpack-bundle-analyzer > /dev/null 2>&1; then
            npx webpack-bundle-analyzer dist/stats.json --report bundle-report.html --mode static
          fi

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            xAPP_dashboard-master/bundle-report.html
            xAPP_dashboard-master/dist/stats.json
          retention-days: 14

  node-security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: node-frontend-build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit on xAPP dashboard
        working-directory: xAPP_dashboard-master
        run: |
          echo "üîí Running npm security audit..."
          
          # Fix package-lock.json first
          rm -rf node_modules package-lock.json
          npm install --package-lock-only
          
          # Run audit
          npm audit --audit-level=moderate || echo "Audit completed with findings"
          
          # Generate audit report
          npm audit --json > npm-audit-report.json || true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: |
            xAPP_dashboard-master/npm-audit-report.json
          retention-days: 30

  # Docker Image Build and Security Scan
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [go-backend-build-test, node-frontend-build-test]
    strategy:
      matrix:
        component: [ric, xapp-dashboard, fl-coordinator]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.${{ matrix.component }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner on image
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
      continue-on-error: true

    - name: Upload Trivy image scan results
      if: github.event_name != 'pull_request' && hashFiles('trivy-image-results.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Helm Chart Testing
  helm-test:
    name: Helm Chart Testing
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install chart-testing
      uses: helm/chart-testing-action@v2

    - name: Run chart-testing (list-changed)
      id: list-changed
      run: |
        changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
        if [[ -n "$changed" ]]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Run chart-testing (lint)
      if: steps.list-changed.outputs.changed == 'true'
      run: ct lint --target-branch ${{ github.event.repository.default_branch }}

    - name: Create kind cluster
      if: steps.list-changed.outputs.changed == 'true'
      uses: helm/kind-action@v1

    - name: Run chart-testing (install)
      if: steps.list-changed.outputs.changed == 'true'
      run: ct install --target-branch ${{ github.event.repository.default_branch }}

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [go-backend-build-test]
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download Go artifact
      uses: actions/download-artifact@v3
      with:
        name: go-binaries
        path: bin/

    - name: Make binaries executable
      run: chmod +x bin/*

    - name: Run integration tests
      env:
        REDIS_URL: redis://localhost:6379
        POSTGRES_URL: postgres://postgres:test_password@localhost:5432/test_db
      run: go test -v -tags=integration ./internal/tests/

  # Deployment (only on main branch and tags)
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [security-scan, docker-build, helm-test, integration-tests]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'staging' || 'production' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Configure Kubernetes context
      run: |
        echo "Configuring Kubernetes context for ${{ github.ref == 'refs/heads/main' && 'staging' || 'production' }}"
        # Add your Kubernetes cluster configuration here
        # kubectl config use-context $CONTEXT_NAME

    - name: Deploy with Helm
      run: |
        helm upgrade --install oran-nearrt-ric ./helm/oran-nearrt-ric \
          --namespace oran-nearrt-ric \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set security.tls.enabled=true \
          --set security.authentication.enabled=true \
          --wait

    - name: Run deployment verification tests
      run: |
        # Add deployment verification commands here
        kubectl get pods -n oran-nearrt-ric
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=oran-nearrt-ric -n oran-nearrt-ric --timeout=300s

  # Performance Testing (only on main branch)
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Add your performance testing commands here
        # e.g., using k6, artillery, or custom Go benchmarks

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results/